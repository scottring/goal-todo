rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Allow creation and updates if the user is creating/updating their own document
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow read: if isSignedIn() && isOwner(userId);
      allow write: if isSignedIn() && isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
    }

    // Areas collection
    match /areas/{areaId} {
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Activities collection
    match /activities/{activityId} {
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.assignedTo == request.auth.uid
      );
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }

    // Routines collection
    match /routines/{routineId} {
      allow read: if isSignedIn() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.assignedTo == request.auth.uid
      );
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
    }
  }
}