rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasEditPermission(data) {
      return isOwner(data.ownerId) || 
             (data.permissions != null && 
              request.auth.uid in data.permissions && 
              data.permissions[request.auth.uid].edit == true);
    }

    function hasViewPermission(data) {
      return isOwner(data.ownerId) || 
             (data.sharedWith != null && request.auth.uid in data.sharedWith) ||
             (data.permissions != null && 
              request.auth.uid in data.permissions && 
              data.permissions[request.auth.uid].view == true);
    }

    function hasInvitePermission(data) {
      return isOwner(data.ownerId) || 
             (data.participants != null && 
              request.auth.uid in data.participants && 
              data.participants[request.auth.uid].permissions.invite == true);
    }

    // Allow initial user document creation during sign-up
    match /users/{userId} {
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow read, update: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;
    }

    match /dev_users/{userId} {
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow read, update: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;
    }

    match /test_users/{userId} {
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow read, update: if isSignedIn() && userId == request.auth.uid;
      allow delete: if false;
    }

    // Areas collection rules
    match /areas/{areaId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /dev_areas/{areaId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /test_areas/{areaId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    // Activities collection rules
    match /activities/{activityId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /dev_activities/{activityId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /test_activities/{activityId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    // Weekly planning sessions collection rules
    match /weeklyPlanningSessions/{sessionId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /dev_weeklyPlanningSessions/{sessionId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /test_weeklyPlanningSessions/{sessionId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && hasEditPermission(resource.data);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    // Shared goals collection rules
    match /shared_goals/{goalId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && (
        isOwner(resource.data.ownerId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) && hasInvitePermission(resource.data)) ||
        hasEditPermission(resource.data)
      );
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /dev_shared_goals/{goalId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && (
        isOwner(resource.data.ownerId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) && hasInvitePermission(resource.data)) ||
        hasEditPermission(resource.data)
      );
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    match /test_shared_goals/{goalId} {
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow read: if isSignedIn() && hasViewPermission(resource.data);
      allow update: if isSignedIn() && (
        isOwner(resource.data.ownerId) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) && hasInvitePermission(resource.data)) ||
        hasEditPermission(resource.data)
      );
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
