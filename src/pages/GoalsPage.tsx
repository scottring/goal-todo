import React, { useState, useEffect } from 'react';
import { Plus, Calendar, Trash2, Edit, X, ChevronLeft, ChevronRight, Loader2 } from 'lucide-react';
import { useAreasContext } from '../contexts/AreasContext';
import { useGoalsContext } from '../contexts/GoalsContext';
import { useAuth } from '../contexts/AuthContext';
import { useLocation, useNavigate } from 'react-router-dom';
import { Timestamp } from 'firebase/firestore';
import type { 
  SourceActivity, 
  RoutineWithoutSystemFields, 
  BaseDocument,
  MeasurableMetric,
  AchievabilityCheck,
  TaskStatus,
  Milestone,
  TaskPriority,
  Task
} from '../types';

interface SmartGoalForm {
  name: string;
  specificAction: string;
  measurableMetric: MeasurableMetric;
  customMetric?: string;
  achievabilityCheck: AchievabilityCheck;
  relevance: string;
  timebound: string;
  areaId: string;
  milestones: {
    name: string;
    targetDate: string;
    successCriteria: string;
    status: TaskStatus;
  }[];
  tasks: {
    title: string;
    description?: string;
    dueDate?: string;
    priority: TaskPriority;
    status: TaskStatus;
    assignedTo?: string;
  }[];
  routines?: {
    title: string;
    description?: string;
    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly' | 'yearly';
    targetCount: number;
    endDate?: string;
    weeklyCompletionTracker?: boolean[];
  }[];
}

const MEASURABLE_METRIC_OPTIONS: { label: string; value: MeasurableMetric }[] = [
  { label: 'Log workouts in app', value: 'log_workouts' },
  { label: 'Track weight', value: 'track_weight' },
  { label: 'Count hours spent', value: 'count_hours' },
  { label: 'Custom metric', value: 'custom' }
];

const ACHIEVABILITY_OPTIONS: { label: string; value: AchievabilityCheck }[] = [
  { label: 'Yes, I can achieve this', value: 'yes' },
  { label: 'No, this seems too difficult', value: 'no' },
  { label: 'Need more resources', value: 'need_resources' }
];

const STATUS_OPTIONS: { label: string; value: TaskStatus }[] = [
  { label: 'Not Started', value: 'not_started' },
  { label: 'In Progress', value: 'in_progress' },
  { label: 'Completed', value: 'completed' }
];

const timestampToDateString = (timestamp: Timestamp | undefined): string => {
  if (!timestamp) return '';
  return new Date(timestamp.seconds * 1000).toISOString().split('T')[0];
};

const dateToTimestamp = (dateStr: string): Timestamp => {
  return Timestamp.fromDate(new Date(dateStr));
};

const GoalsPage: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { areas } = useAreasContext();
  const { goals, loading, createGoal, updateGoal, deleteGoal } = useGoalsContext();
  const { user } = useAuth();
  const [isAdding, setIsAdding] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);
  const [editingGoal, setEditingGoal] = useState<string | null>(null);
  const [editMode, setEditMode] = useState<'wizard' | 'edit'>('wizard');
  const [smartGoal, setSmartGoal] = useState<SmartGoalForm>({
    name: '',
    specificAction: '',
    measurableMetric: 'log_workouts',
    achievabilityCheck: 'yes',
    relevance: '',
    timebound: '',
    areaId: '',
    milestones: [{
      name: '',
      targetDate: '',
      successCriteria: '',
      status: 'not_started'
    }],
    tasks: [],
    routines: []
  });

  // Handle navigation state
  useEffect(() => {
    const state = location.state as { editingGoal?: SourceActivity; preselectedAreaId?: string } | null;
    
    if (state?.editingGoal) {
      handleEdit(state.editingGoal);
      // Clear the navigation state
      window.history.replaceState({}, document.title);
    } else if (state?.preselectedAreaId && typeof state.preselectedAreaId === 'string') {
      const areaId: string = state.preselectedAreaId;
      setSmartGoal(prev => ({ ...prev, areaId }));
      setIsAdding(true);
      // Clear the navigation state
      window.history.replaceState({}, document.title);
    }
  }, [location.state]);

  const handleSubmit = async () => {
    if (!smartGoal.areaId) return;

    const milestones: Milestone[] = smartGoal.milestones.map(m => ({
      id: '', // Will be generated by Firestore
      name: m.name,
      targetDate: dateToTimestamp(m.targetDate),
      successCriteria: m.successCriteria,
      status: m.status,
      tasks: []
    }));

    const tasks: Task[] = smartGoal.tasks.map(task => ({
      id: '', // Will be generated by Firestore
      ownerId: user?.uid || '',
      createdAt: Timestamp.now(),
      updatedAt: Timestamp.now(),
      title: task.title,
      description: task.description || '',
      dueDate: task.dueDate ? dateToTimestamp(task.dueDate) : undefined,
      priority: task.priority,
      status: task.status,
      completed: task.status === 'completed',
      assignedTo: task.assignedTo,
      goalId: editingGoal || undefined,
      milestoneId: undefined,
      areaId: smartGoal.areaId
    }));

    const routines = smartGoal.routines?.map(routine => ({
      title: routine.title,
      description: routine.description || '',
      frequency: routine.frequency,
      targetCount: routine.targetCount,
      endDate: routine.endDate ? dateToTimestamp(routine.endDate) : undefined,
      completionDates: [] as Timestamp[],
      weeklyCompletionTracker: routine.weeklyCompletionTracker || new Array(7).fill(false),
      areaId: smartGoal.areaId,
      assignedTo: undefined
    } as RoutineWithoutSystemFields)) || [];

    const goalData = {
      name: smartGoal.name,
      specificAction: smartGoal.specificAction || '',
      measurableMetric: smartGoal.measurableMetric,
      customMetric: smartGoal.customMetric || '',
      achievabilityCheck: smartGoal.achievabilityCheck,
      relevance: smartGoal.relevance || '',
      deadline: smartGoal.timebound ? dateToTimestamp(smartGoal.timebound) : undefined,
      areaId: smartGoal.areaId,
      milestones,
      tasks,
      sharedWith: [] as string[],
      routines
    } satisfies Omit<SourceActivity, keyof BaseDocument>;

    try {
      if (editingGoal) {
        await updateGoal(editingGoal, goalData);
      } else {
        await createGoal(goalData);
      }

      setSmartGoal({
        name: '',
        specificAction: '',
        measurableMetric: 'log_workouts',
        achievabilityCheck: 'yes',
        relevance: '',
        timebound: '',
        areaId: '',
        milestones: [{
          name: '',
          targetDate: '',
          successCriteria: '',
          status: 'not_started'
        }],
        tasks: [],
        routines: []
      });
      setIsAdding(false);
      setCurrentStep(0);
      setEditingGoal(null);
      setEditMode('wizard');
    } catch (err) {
      console.error('Error saving goal:', err);
    }
  };

  const handleEdit = (goal: SourceActivity) => {
    setSmartGoal({
      name: goal.name,
      specificAction: goal.specificAction,
      measurableMetric: goal.measurableMetric,
      customMetric: goal.customMetric,
      achievabilityCheck: goal.achievabilityCheck,
      relevance: goal.relevance,
      timebound: timestampToDateString(goal.deadline),
      areaId: goal.areaId,
      milestones: goal.milestones.map(m => ({
        name: m.name,
        targetDate: timestampToDateString(m.targetDate),
        successCriteria: m.successCriteria,
        status: m.status
      })),
      tasks: goal.tasks.map(task => ({
        title: task.title,
        description: task.description,
        dueDate: task.dueDate ? timestampToDateString(task.dueDate) : undefined,
        priority: task.priority,
        status: task.status,
        assignedTo: task.assignedTo
      })),
      routines: goal.routines?.map(routine => ({
        title: routine.title,
        description: routine.description || '',
        frequency: routine.frequency,
        targetCount: routine.targetCount,
        endDate: timestampToDateString(routine.endDate),
        weeklyCompletionTracker: routine.weeklyCompletionTracker
      })) || []
    });
    
    setEditingGoal(goal.id);
    setEditMode('edit');
    setIsAdding(true);
  };

  const handleDelete = async (goalId: string) => {
    if (window.confirm('Are you sure you want to delete this goal?')) {
      try {
        await deleteGoal(goalId);
      } catch (err) {
        console.error('Error deleting goal:', err);
      }
    }
  };

  const renderAreaStep = () => (
    <div className="space-y-4">
      <select
        value={smartGoal.areaId}
        onChange={e => setSmartGoal(prev => ({ ...prev, areaId: e.target.value }))}
        className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
        required
      >
        <option value="">Select an area</option>
        {areas.map(area => (
          <option key={area.id} value={area.id}>{area.name}</option>
        ))}
      </select>
    </div>
  );

  const renderSpecificStep = () => (
    <div className="space-y-3">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Goal Name
        </label>
        <input
          type="text"
          value={smartGoal.name}
          onChange={e => setSmartGoal(prev => ({ ...prev, name: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="Give your goal a name"
          required
        />
      </div>
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Specific Action
        </label>
        <textarea
          value={smartGoal.specificAction}
          onChange={e => setSmartGoal(prev => ({ ...prev, specificAction: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="What exactly do you want to achieve?"
          rows={3}
          required
        />
      </div>
      <p className="text-sm text-gray-500 italic">Example: Run 2x per week for 30 minutes each session</p>
    </div>
  );

  const renderMeasurableStep = () => (
    <div className="space-y-3">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          How will you measure progress?
        </label>
        <select
          value={smartGoal.measurableMetric}
          onChange={e => setSmartGoal(prev => ({ 
            ...prev, 
            measurableMetric: e.target.value as MeasurableMetric,
            customMetric: e.target.value === 'custom' ? prev.customMetric : undefined
          }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        >
          {MEASURABLE_METRIC_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
      {smartGoal.measurableMetric === 'custom' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Custom Metric
          </label>
          <input
            type="text"
            value={smartGoal.customMetric || ''}
            onChange={e => setSmartGoal(prev => ({ ...prev, customMetric: e.target.value }))}
            className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
            placeholder="Describe your custom metric"
            required
          />
        </div>
      )}
    </div>
  );

  const renderAchievableStep = () => (
    <div className="space-y-3">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Is this goal achievable with your current resources?
        </label>
        <select
          value={smartGoal.achievabilityCheck}
          onChange={e => setSmartGoal(prev => ({ ...prev, achievabilityCheck: e.target.value as AchievabilityCheck }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        >
          {ACHIEVABILITY_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>
    </div>
  );

  const renderRelevantStep = () => (
    <div className="space-y-3">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Why is this goal important to you?
        </label>
        <textarea
          value={smartGoal.relevance}
          onChange={e => setSmartGoal(prev => ({ ...prev, relevance: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="How does this goal align with your values and long-term objectives?"
          rows={3}
          required
        />
      </div>
      <p className="text-sm text-gray-500 italic">Example: Improve health and maintain work-life balance</p>
    </div>
  );

  const renderTimeboundStep = () => (
    <div className="space-y-3">
      <input
        type="date"
        value={smartGoal.timebound}
        onChange={e => setSmartGoal(prev => ({ ...prev, timebound: e.target.value }))}
        className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
        required
      />
      <p className="text-sm text-gray-500 italic">Example: 10 weeks from today</p>
    </div>
  );

  const renderMilestonesStep = () => (
    <div className="space-y-3">
      {smartGoal.milestones.map((milestone, index) => (
        <div key={index} className="border rounded-md p-4 space-y-4">
          <div className="flex justify-between items-start">
            <h4 className="font-medium">Milestone {index + 1}</h4>
            {index > 0 && (
              <button
                type="button"
                onClick={() => {
                  const newMilestones = smartGoal.milestones.filter((_, i) => i !== index);
                  setSmartGoal(prev => ({ ...prev, milestones: newMilestones }));
                }}
                className="text-red-500 hover:text-red-700"
              >
                <X className="w-5 h-5" />
              </button>
            )}
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Milestone Name
              </label>
              <input
                type="text"
                value={milestone.name}
                onChange={e => {
                  const newMilestones = [...smartGoal.milestones];
                  newMilestones[index] = { ...milestone, name: e.target.value };
                  setSmartGoal(prev => ({ ...prev, milestones: newMilestones }));
                }}
                className="w-full p-2 border rounded-md"
                placeholder={`Milestone ${index + 1}`}
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Target Date
              </label>
              <input
                type="date"
                value={milestone.targetDate}
                onChange={e => {
                  const newMilestones = [...smartGoal.milestones];
                  newMilestones[index] = { ...milestone, targetDate: e.target.value };
                  setSmartGoal(prev => ({ ...prev, milestones: newMilestones }));
                }}
                className="w-full p-2 border rounded-md"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Success Criteria
              </label>
              <input
                type="text"
                value={milestone.successCriteria}
                onChange={e => {
                  const newMilestones = [...smartGoal.milestones];
                  newMilestones[index] = { ...milestone, successCriteria: e.target.value };
                  setSmartGoal(prev => ({ ...prev, milestones: newMilestones }));
                }}
                className="w-full p-2 border rounded-md"
                placeholder="How will you know this milestone is complete?"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                value={milestone.status}
                onChange={e => {
                  const newMilestones = [...smartGoal.milestones];
                  newMilestones[index] = { ...milestone, status: e.target.value as TaskStatus };
                  setSmartGoal(prev => ({ ...prev, milestones: newMilestones }));
                }}
                className="w-full p-2 border rounded-md"
                required
              >
                {STATUS_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      ))}
      <button
        type="button"
        onClick={() => setSmartGoal(prev => ({
          ...prev,
          milestones: [...prev.milestones, {
            name: '',
            targetDate: '',
            successCriteria: '',
            status: 'not_started'
          }]
        }))}
        className="text-blue-600 hover:text-blue-700 text-sm font-medium"
      >
        + Add Milestone
      </button>
    </div>
  );

  const renderTasksStep = () => (
    <div className="space-y-3">
      {smartGoal.tasks.map((task, index) => (
        <div key={index} className="border rounded-md p-4 space-y-4">
          <div className="flex justify-between items-start">
            <h4 className="font-medium">Task {index + 1}</h4>
            <button
              type="button"
              onClick={() => {
                const newTasks = smartGoal.tasks.filter((_, i) => i !== index);
                setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
              }}
              className="text-red-500 hover:text-red-700"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Title
              </label>
              <input
                type="text"
                value={task.title}
                onChange={e => {
                  const newTasks = [...smartGoal.tasks];
                  newTasks[index] = { ...task, title: e.target.value };
                  setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
                }}
                className="w-full p-2 border rounded-md"
                placeholder="Task title"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <input
                type="text"
                value={task.description || ''}
                onChange={e => {
                  const newTasks = [...smartGoal.tasks];
                  newTasks[index] = { ...task, description: e.target.value };
                  setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
                }}
                className="w-full p-2 border rounded-md"
                placeholder="Optional description"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Due Date
              </label>
              <input
                type="date"
                value={task.dueDate || ''}
                onChange={e => {
                  const newTasks = [...smartGoal.tasks];
                  newTasks[index] = { ...task, dueDate: e.target.value };
                  setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
                }}
                className="w-full p-2 border rounded-md"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Priority
              </label>
              <select
                value={task.priority}
                onChange={e => {
                  const newTasks = [...smartGoal.tasks];
                  newTasks[index] = { ...task, priority: e.target.value as TaskPriority };
                  setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
                }}
                className="w-full p-2 border rounded-md"
                required
              >
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Status
              </label>
              <select
                value={task.status}
                onChange={e => {
                  const newTasks = [...smartGoal.tasks];
                  newTasks[index] = { ...task, status: e.target.value as TaskStatus };
                  setSmartGoal(prev => ({ ...prev, tasks: newTasks }));
                }}
                className="w-full p-2 border rounded-md"
                required
              >
                {STATUS_OPTIONS.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
      ))}
      <button
        type="button"
        onClick={() => setSmartGoal(prev => ({
          ...prev,
          tasks: [...prev.tasks, {
            title: '',
            priority: 'medium',
            status: 'not_started'
          }]
        }))}
        className="text-blue-600 hover:text-blue-700 text-sm font-medium"
      >
        + Add Task
      </button>
    </div>
  );

  const renderRoutinesStep = () => (
    <div className="space-y-3">
      {smartGoal.routines?.map((routine, index) => (
        <div key={index} className="border rounded-md p-4 space-y-4">
          <div className="flex justify-between">
            <h4 className="font-medium">Habit/Routine {index + 1}</h4>
            <button
              type="button"
              onClick={() => {
                const newRoutines = smartGoal.routines?.filter((_, i) => i !== index) || [];
                setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
              }}
              className="text-red-500 hover:text-red-700"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Title
              </label>
              <input
                type="text"
                value={routine.title}
                onChange={e => {
                  const newRoutines = [...(smartGoal.routines || [])];
                  newRoutines[index] = { ...routine, title: e.target.value };
                  setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
                }}
                className="w-full p-2 border rounded-md"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Description
              </label>
              <input
                type="text"
                value={routine.description || ''}
                onChange={e => {
                  const newRoutines = [...(smartGoal.routines || [])];
                  newRoutines[index] = { ...routine, description: e.target.value };
                  setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
                }}
                className="w-full p-2 border rounded-md"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Frequency
              </label>
              <select
                value={routine.frequency}
                onChange={e => {
                  const newRoutines = [...(smartGoal.routines || [])];
                  newRoutines[index] = { ...routine, frequency: e.target.value as RoutineWithoutSystemFields['frequency'] };
                  setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
                }}
                className="w-full p-2 border rounded-md"
                required
              >
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="monthly">Monthly</option>
                <option value="quarterly">Quarterly</option>
                <option value="yearly">Yearly</option>
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Target Count (times per {routine.frequency})
              </label>
              <input
                type="number"
                min="1"
                value={routine.targetCount}
                onChange={e => {
                  const newRoutines = [...(smartGoal.routines || [])];
                  newRoutines[index] = { ...routine, targetCount: parseInt(e.target.value) };
                  setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
                }}
                className="w-full p-2 border rounded-md"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                End Date (optional)
              </label>
              <input
                type="date"
                value={routine.endDate || ''}
                onChange={e => {
                  const newRoutines = [...(smartGoal.routines || [])];
                  newRoutines[index] = { ...routine, endDate: e.target.value };
                  setSmartGoal(prev => ({ ...prev, routines: newRoutines }));
                }}
                className="w-full p-2 border rounded-md"
              />
            </div>
          </div>
        </div>
      ))}
      <button
        type="button"
        onClick={() => setSmartGoal(prev => ({
          ...prev,
          routines: [...(prev.routines || []), {
            title: '',
            description: '',
            frequency: 'daily',
            targetCount: 1
          }]
        }))}
        className="text-blue-600 hover:text-blue-700 text-sm font-medium"
      >
        + Add Habit/Routine
      </button>
    </div>
  );

  const renderReviewStep = () => (
    <div className="space-y-6 bg-gray-50 p-6 rounded-lg">
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Goal Name</h3>
        <p className="text-gray-900">{smartGoal.name}</p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Specific Action</h3>
        <p className="text-gray-900">{smartGoal.specificAction}</p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Measurable Metric</h3>
        <p className="text-gray-900">
          {MEASURABLE_METRIC_OPTIONS.find(opt => opt.value === smartGoal.measurableMetric)?.label}
          {smartGoal.measurableMetric === 'custom' && smartGoal.customMetric && (
            <span className="block text-sm text-gray-600 mt-1">
              Custom metric: {smartGoal.customMetric}
            </span>
          )}
        </p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Achievability</h3>
        <p className="text-gray-900">
          {ACHIEVABILITY_OPTIONS.find(opt => opt.value === smartGoal.achievabilityCheck)?.label}
        </p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Relevance</h3>
        <p className="text-gray-900">{smartGoal.relevance}</p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Time-bound</h3>
        <p className="text-gray-900">{smartGoal.timebound}</p>
      </div>
      <div>
        <h3 className="font-medium text-gray-700 mb-2">Milestones</h3>
        <div className="space-y-3">
          {smartGoal.milestones.map((milestone, index) => (
            <div key={index} className="bg-white p-3 rounded-md">
              <div className="flex items-center justify-between">
                <h4 className="font-medium text-gray-900">{milestone.name}</h4>
                <span className={`text-xs px-2 py-0.5 rounded ${
                  milestone.status === 'completed' 
                    ? 'bg-green-100 text-green-800'
                    : milestone.status === 'in_progress'
                    ? 'bg-blue-100 text-blue-800'
                    : 'bg-gray-100 text-gray-800'
                }`}>
                  {STATUS_OPTIONS.find(opt => opt.value === milestone.status)?.label}
                </span>
              </div>
              <div className="mt-2 text-sm text-gray-600">
                <p>Target Date: {milestone.targetDate}</p>
                <p>Success Criteria: {milestone.successCriteria}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
      {smartGoal.routines && smartGoal.routines.length > 0 && (
        <div>
          <h3 className="font-medium text-gray-700 mb-2">Habits & Routines</h3>
          <div className="space-y-3">
            {smartGoal.routines.map((routine, index) => (
              <div key={index} className="bg-white p-3 rounded-md">
                <h4 className="font-medium text-gray-900">{routine.title}</h4>
                {routine.description && (
                  <p className="mt-1 text-sm text-gray-600">{routine.description}</p>
                )}
                <div className="mt-2 text-sm text-gray-600">
                  <p>Frequency: {routine.frequency}</p>
                  <p>Target: {routine.targetCount} times per {routine.frequency}</p>
                  {routine.endDate && <p>End Date: {routine.endDate}</p>}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );

  const renderEditForm = () => (
    <div className="space-y-6">
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Area
        </label>
        <select
          value={smartGoal.areaId}
          onChange={e => setSmartGoal(prev => ({ ...prev, areaId: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        >
          <option value="">Select an area</option>
          {areas.map(area => (
            <option key={area.id} value={area.id}>{area.name}</option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Goal Name
        </label>
        <input
          type="text"
          value={smartGoal.name}
          onChange={e => setSmartGoal(prev => ({ ...prev, name: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="Give your goal a name"
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Specific Action
        </label>
        <textarea
          value={smartGoal.specificAction}
          onChange={e => setSmartGoal(prev => ({ ...prev, specificAction: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="What exactly do you want to achieve?"
          rows={3}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          How will you measure progress?
        </label>
        <select
          value={smartGoal.measurableMetric}
          onChange={e => setSmartGoal(prev => ({ 
            ...prev, 
            measurableMetric: e.target.value as MeasurableMetric,
            customMetric: e.target.value === 'custom' ? prev.customMetric : undefined
          }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        >
          {MEASURABLE_METRIC_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
        {smartGoal.measurableMetric === 'custom' && (
          <div className="mt-2">
            <input
              type="text"
              value={smartGoal.customMetric || ''}
              onChange={e => setSmartGoal(prev => ({ ...prev, customMetric: e.target.value }))}
              className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
              placeholder="Describe your custom metric"
              required
            />
          </div>
        )}
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Is this goal achievable with your current resources?
        </label>
        <select
          value={smartGoal.achievabilityCheck}
          onChange={e => setSmartGoal(prev => ({ ...prev, achievabilityCheck: e.target.value as AchievabilityCheck }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        >
          {ACHIEVABILITY_OPTIONS.map(option => (
            <option key={option.value} value={option.value}>
              {option.label}
            </option>
          ))}
        </select>
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Why is this goal important to you?
        </label>
        <textarea
          value={smartGoal.relevance}
          onChange={e => setSmartGoal(prev => ({ ...prev, relevance: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          placeholder="How does this goal align with your values and long-term objectives?"
          rows={3}
          required
        />
      </div>

      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Deadline
        </label>
        <input
          type="date"
          value={smartGoal.timebound}
          onChange={e => setSmartGoal(prev => ({ ...prev, timebound: e.target.value }))}
          className="w-full p-3 text-lg border rounded-lg bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
          required
        />
      </div>

      {renderMilestonesStep()}
      {renderTasksStep()}
      {renderRoutinesStep()}
    </div>
  );

  const steps = [
    {
      title: "What area is this goal for?",
      subtitle: "Choose the life area this goal belongs to",
      component: renderAreaStep
    },
    {
      title: "What do you want to achieve?",
      subtitle: "Be specific about what you want to accomplish",
      component: renderSpecificStep
    },
    {
      title: "How will you measure success?",
      subtitle: "Define concrete numbers or milestones",
      component: renderMeasurableStep
    },
    {
      title: "Is it achievable?",
      subtitle: "Consider your resources and constraints",
      component: renderAchievableStep
    },
    {
      title: "Why is this important?",
      subtitle: "Connect this goal to your bigger picture",
      component: renderRelevantStep
    },
    {
      title: "When will you achieve this?",
      subtitle: "Set a realistic deadline",
      component: renderTimeboundStep
    },
    {
      title: "Break it down",
      subtitle: "List the key milestones to reach your goal",
      component: renderMilestonesStep
    },
    {
      title: "Add Tasks",
      subtitle: "Create actionable tasks to achieve your milestones",
      component: renderTasksStep
    },
    {
      title: "Add Habits & Routines",
      subtitle: "Create recurring actions to support your goal",
      component: renderRoutinesStep
    },
    {
      title: "Review Your SMART Goal",
      subtitle: "Make sure everything looks right",
      component: renderReviewStep
    }
  ];

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <Loader2 className="w-8 h-8 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Goals</h1>
          <p className="mt-1 text-sm text-gray-600">
            Set and track your SMART goals
          </p>
        </div>
        <button
          onClick={() => {
            setIsAdding(true);
            setEditMode('wizard');
            setCurrentStep(0);
          }}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
        >
          <Plus className="w-4 h-4 mr-2" />
          Add Goal
        </button>
      </div>

      <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {goals.map((goal) => (
          <div
            key={goal.id}
            className="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200"
            style={{ 
              borderLeft: `4px solid ${
                areas.find(a => a.id === goal.areaId)?.color || '#000000'
              }` 
            }}
            onClick={() => navigate(`/goals/${goal.id}`)}
          >
            <div className="flex justify-between items-start">
              <div>
                <h3 className="text-xl font-semibold text-gray-800">{goal.name}</h3>
                <p className="mt-2 text-gray-600">{goal.specificAction}</p>
                {goal.customMetric && (
                  <p className="mt-1 text-sm text-gray-500">
                    Measuring: {goal.customMetric}
                  </p>
                )}
              </div>
              <div className="flex gap-2">
                <button
                  onClick={() => handleEdit(goal)}
                  className="text-gray-400 hover:text-gray-600 transition-colors"
                  aria-label="Edit goal"
                >
                  <Edit className="w-4 h-4" />
                </button>
                <button
                  onClick={() => handleDelete(goal.id)}
                  className="text-red-400 hover:text-red-600 transition-colors"
                  aria-label="Delete goal"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
            {goal.deadline && (
              <div className="flex items-center gap-2 text-sm text-gray-500 mt-3">
                <Calendar className="w-4 h-4" />
                {goal.deadline.toDate().toLocaleDateString()}
              </div>
            )}
            {goal.milestones && goal.milestones.length > 0 && (
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Milestones:</h4>
                <ul className="list-disc list-inside text-sm text-gray-600 space-y-1">
                  {goal.milestones.map((milestone, index) => (
                    <li key={index} className="flex items-center gap-2">
                      <span>{milestone.name}</span>
                      <span className={`text-xs px-2 py-0.5 rounded ${
                        milestone.status === 'completed' 
                          ? 'bg-green-100 text-green-800'
                          : milestone.status === 'in_progress'
                          ? 'bg-blue-100 text-blue-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {STATUS_OPTIONS.find(opt => opt.value === milestone.status)?.label}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ))}
      </div>

      {isAdding && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl shadow-xl w-full max-w-2xl p-8 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-6">
              <div>
                <h2 className="text-2xl font-bold text-gray-800">
                  {editMode === 'wizard' ? steps[currentStep].title : 'Edit Goal'}
                </h2>
                {editMode === 'wizard' && steps[currentStep].subtitle && (
                  <p className="text-gray-600 mt-1">{steps[currentStep].subtitle}</p>
                )}
              </div>
              <button
                onClick={() => {
                  setIsAdding(false);
                  setCurrentStep(0);
                  setEditingGoal(null);
                  setEditMode('wizard');
                }}
                className="text-gray-500 hover:text-gray-700"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="mb-8">
              {editMode === 'wizard' ? steps[currentStep].component() : renderEditForm()}
            </div>

            <div className="flex justify-between items-center">
              {editMode === 'wizard' ? (
                <>
                  <button
                    type="button"
                    onClick={() => setCurrentStep(prev => prev - 1)}
                    className={`flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-700 ${
                      currentStep === 0 ? 'invisible' : ''
                    }`}
                  >
                    <ChevronLeft className="w-5 h-5" />
                    Back
                  </button>
                  <div className="flex gap-1">
                    {steps.map((_, index) => (
                      <div
                        key={index}
                        className={`w-2 h-2 rounded-full ${
                          index === currentStep ? 'bg-blue-600' : 'bg-gray-300'
                        }`}
                      />
                    ))}
                  </div>
                  <button
                    type="button"
                    onClick={() => {
                      if (currentStep === steps.length - 1) {
                        handleSubmit();
                      } else {
                        setCurrentStep(prev => prev + 1);
                      }
                    }}
                    className="flex items-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    {currentStep === steps.length - 1 ? (
                      'Create Goal'
                    ) : (
                      <>
                        Next
                        <ChevronRight className="w-5 h-5" />
                      </>
                    )}
                  </button>
                </>
              ) : (
                <div className="flex justify-end w-full gap-3">
                  <button
                    type="button"
                    onClick={() => {
                      setIsAdding(false);
                      setEditingGoal(null);
                      setEditMode('wizard');
                    }}
                    className="px-4 py-2 text-gray-600 hover:text-gray-700"
                  >
                    Cancel
                  </button>
                  <button
                    type="button"
                    onClick={handleSubmit}
                    className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                  >
                    Save Changes
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default GoalsPage;